import argparse
import os
import sys
from typing import List

import yaml


def debpic_parse_args(argv: List[str]):
    # Customer formatter required to print help message for "--" option.
    class CustomHelpFormatter(argparse.HelpFormatter):
        def format_help(self):
            original_help = super().format_help()
            if "--version" not in argv and "-v" not in argv:
                return (
                    original_help
                    + "  --\t\t\tArguments to pass to dpkg-buildpackage. \n"
                )
            return original_help

    def read_config(filename: str, config: dict):
        # Read defaults from configuration file.
        # Save config read_config.prev_config.
        # combined_config = prev_config + new config from file (preferred)
        try:
            with open(filename, "r") as f:
                try:
                    new_config = yaml.safe_load(f)
                    if new_config:
                        combined_config = {**config, **new_config}
                        return combined_config
                except yaml.parser.ParserError:
                    sys.exit(f"Bad format in config file: {filename}")
        except FileNotFoundError:
            pass

        return config

    parser = argparse.ArgumentParser(
        formatter_class=CustomHelpFormatter, add_help=False
    )

    general_group = parser.add_argument_group("general options")
    general_group.add_argument(
        "-h", "--help", action="help", help="show this help message and exit"
    )
    general_group.add_argument(
        "-v", "--version", action="version", version="%(prog)s v1.0.0"
    )
    general_group.add_argument(
        "-di",
        "--delete-images",
        help="Delete all build environment images generated by this tool.",
        action="store_true",
    )
    build_group = parser.add_argument_group("build options")
    build_group.add_argument(
        "-nc",
        "--no-cache",
        help="Do not use cache when building the image.",
        action="store_const",
        default="",
        const="--no-cache",
    )
    build_group.add_argument(
        "-d",
        "--distribution",
        help="Select a linux distribution for the docker parent image (e.g. debian:11).",
        default=None,
    )
    build_group.add_argument(
        "-lr",
        "--local-repository",
        help="Local path to folder with .debs to be used as local apt repository. Defaults to ./local_repository.",
        # Default handled in dockerfile
    )
    build_group.add_argument(
        "-s",
        "--sources",
        help="Select a sources file stored at /etc/debpic/sources.list.d/<SOURCE>.list.",
        default="default",
    )
    build_group.add_argument(
        "-ep",
        "--extra-pkg",
        help="Extra package to install in the container. This option can be specified multiple times for multiple packages.",
        action="append",
        default=[],
    )
    parser.add_argument(
        "--get-build-arguments",
        # Help suppressed as this option is generally only used by tools such as Jenkins
        help=argparse.SUPPRESS,
        action="store_true",
    )
    run_group = parser.add_argument_group("run options")
    run_group.add_argument(
        "-hk",
        "--hook",
        help="Select a hook script stored at /etc/debpic/hooks/<SCRIPT>.",
        default="default",
    )
    exclusive_group_parser = run_group.add_mutually_exclusive_group()
    exclusive_group_parser.add_argument(
        "-i",
        "--interactive",
        help="Open an interactive terminal to the container.",
        action="store_const",
        default="",
        const="--interactive",
    )
    exclusive_group_parser.add_argument(
        "-vs",
        "--vscode",
        help="Open repository using Visual Studio Code Dev Container (https://code.visualstudio.com/docs/devcontainers/containers).",
        action="store_true",
    )
    exclusive_group_parser.add_argument(
        "command",
        help="Command to execute in the container.",
        nargs="?",
        default="",
    )
    run_group.add_argument(
        "-dst",
        "--destination",
        help="Chose a destination directory to store built debian packages.",
        default=None,
    )

    SYSTEM_CONFIG_FILE = os.path.expanduser("/etc/debpic/debpic.conf")
    USER_CONFIG_FILE = os.path.expanduser("~/.config/debpic/debpic.conf")
    REPO_CONFIG_FILE = os.path.expanduser("./debpic.conf")
    system_config = read_config(SYSTEM_CONFIG_FILE, {})
    user_config = read_config(USER_CONFIG_FILE, system_config)
    repo_config = read_config(REPO_CONFIG_FILE, user_config)

    dpkg_buildpackage_args = repo_config["--"] if "--" in repo_config else ""
    parser.set_defaults(**repo_config)

    # Extract dpkg-buildpackage ("--") args before argparse parsing
    for idx, arg in enumerate(argv):
        if arg == "--":
            debpic_args = argv[:idx]
            dpkg_buildpackage_args += " " + " ".join(argv[idx + 1 :])
            break
    else:
        debpic_args = argv

    args = parser.parse_args(debpic_args)
    args.dpkg_buildpackage_args = dpkg_buildpackage_args

    return args
